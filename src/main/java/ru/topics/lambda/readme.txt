*Lambda выражения*

1) Лямбда выражения позволяют написать метод и сразу же использовать его. Это особенно
полезно когда метод нужно вызвать 1 единственный раз.

2) Лямбда выражения имеют следующий синтаксис:
(аргументы) -> {тело метода}
Например еще:
(Тип1 арг1, тип2 арг2, ...) -> {тело метода}

3) Структура лямбда выражений:
    - Лямбда выражения могут иметь 0 и более входных аргументов.
    - Тип параметров можно указывать явно, либо тип может быть получен из контекста,
например, (int a) можно записать просто как (а).
    - Параметры заключаются в круглые скобки и разделяются запятыми, например (a,b)
или (int a, String b) и т.п.
    - Если параметров нет, то нужно использовать пустые круглые скобки, например
() -> 38.
    - Когда параметр 1, если тип не указывается явно, то скобки можно опустить,
например a -> return a*a
    - Тело лямбда выражения может содержать от 0 и более выражений.
    - Если тело состоит из одного оператора, его можно не заключать в фигурные скобки,
а возвращаемое значение можно указывать без ключевого слово return.
    - Если тело состоит из нескольких операторов, то скобки обязательны, а в конце
надо указывать ключевое слово return, в противном случае типом возвращаемого значения
будет void.

4) Функциональный интерфейс - это интерфейс без объявления методов и полей т.е. пустой
интерфейс. Или же можно назвать функциональным тот интерфейс, который содержит всего 1
метод.

5) Раньше нам приходилось использовать анонимные классы для создания объектов,
реализующих функциональный интерфейс, теперь можно использовать лямбда выражения.

6) Лямбда выражения отличаются от анонимных классов. Для анонимных классов, ключевое
слово 'this' обозначает объект анонимного класса, в то время как в лямбда-выражении
'this' обозначает объект класса в котором это лямбда выражение используется.

7) Лямбда выражения можно передавать как аргумент метода - это кусочек функционального
программирования в java.

8) Чтобы научиться писать лямбду, лучше всего писать каждый раз вызов анонимного
класса, а потом его конвертировать в лямбду с помощью IDE, каждый раз разбирая как
именно получилась такая лямбда.