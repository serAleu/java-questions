*Stream API*

1) Stream API это способ работать со структурами данных в функциональном стиле, а именно
это способ упростить операции фильтрации, сортировки и других манипуляций с данными.

2) Для создания стрима нам нужна коллекция, массив или метод откуда стрим будет
использовать данные.

3) Операторы (методы) Stream API:
    - Промежуточные - обрабатывают поступающие элементы и возвращают стрим. Промежуточных
операторов может быть много в одной цепочке. Перечень:
1) map() - преобразование элементов
2) filter() - фильтрация элементов
3) peek() - доступ к элементу
4) distinct() - удаление дублей
5) sorted() - сортировка (можно использовать Comparator)
6) limit() - ограничение по количеству элементов
7) skip() - пропуск n числа первых элементов
8) flatMap() - разворачивание многомерных структур, например Stream<Stream<R>>

    - Терминальные - обрабатывают элементы и завершают работу стрима. В цепочке стрима
терминальный оператор может быть только один. Перечень основных:
1) collect() - преобразование в коллекцию
2) forEach() - итерация по элементам
3) count() - подсчет количества элементов
4) min()/max() - мин и макс значения
5) findFirst() - поиск первого подходящего элемента
6) allMatch() - соответствие всех элементов (булево)
7) noneMatch() - полное несоответствие элементов (булево)
8) anyMatch() - соответствие хотя бы одного элемента (булево)

4) Один экземпляр стрима можно использовать только 1 раз.

5) Схема стрима:

ИСТОЧНИК ===> Промежуточные операторы ===> Терминальный оператор
